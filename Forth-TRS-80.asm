;
	output Forth-TRS-80.bin
;
	phase 5DC0H
;
; REGISTROS:
;   BC = FORTH PROGRAM COUNTER
;   IX = FORTH PROGRAM COUNTER STACK POINTER E DO .. LOOP DATA (I, J)
;   IY = SEMPRE APONTA PARA A ROTINA ENDZ80
;
; INICIO DO PROGRAMA
;
; ROTINAS TRS-80
;
; ROTINAS CASSETE
;
CASOUT	equ 0264H
WLEADER	equ 0287H
CASSTOP	equ 01F8H
;
; ROTINAS I/O
;
VDCHAR	equ 033AH
VDCLS	equ 01C9H
KEYIN	equ 0049H
;
; VARIAVEIS FORTH
;
BEGIN:	db 00H
PPP:	dw 7D00H	; PONTEIRO PILHA DE PARAMETROS
	dw BEGIN	; PONTEIRO ENDEREÇO DE CARGA DO PROGRAMA
START:	dw MAINLOOP	; PONTEIRO ENDEREÇO DE ENTRADA DA APLICAÇÃO
PPR:	dw 7FFEH	; PONTEIRO PILHA DE RETORNO
PPD:	dw KBO		; PONTEIRO PARA PROXIMA PALAVRA A SER INCLUIDA NO DICIONARIO
PLBP:	dw 5D00H	; PONTEIRO BUFFER DE DIGITAÇÃO DE LINHA
PBUF:	dw 0000H	; PONTEIRO POSICAO DE VARREDURA DO BUFFER DE DIGITACAO
UPDC:	dw COUTIN	; PONTEIRO ULTIMA PALAVRA DICIONARIO CORRENTE
VMODE:	dw 0000H	; VARIAVEL MODO IMEDIATO (0) OU EXECUCAO (1)
VBASE:	dw 0010H	; VARIAVEL BASE NUMERICA
PUPDP:	dw UPDC		; PONTEIRO ULTIMA PALAVRA DICIONARIO PRINCIPAL (FIXO)
PUPDC:	dw UPDC		; PONTEIRO ULTIMA PALAVRA DICIONARIO CORRENTE
UPCC:	dw CTHEN	; PONTEIRO ULTIMA PALAVRA DICIONARIO DE COMPILACAO (IMMEDIATE)
VSTATE:	dw 0000H	; VARIAVEL DE STATE
BFTC:	dw 5D00H	; PONTEIRO BUFFER TECLADO
L5DDF:	db 51H		; LSB ROTINA DE ENTRADA (CSAVE)
L5DE0:	db 5EH		; MSB ROTINA DE ENTRADA (CSAVE)
	dw 0000H
	dw 0000H
	dw 0000H
	db 00H
	dw 0FFFFH
	dw 0FFFFH
	dw 0FFFFH
	dw 0FFFFH
	dw 0000H
;
ENDFORTH:	dw $+2
	LD C,(IX+0)
	INC IX
	LD B,(IX+0)
	INC IX
ENDZ80:	LD A,(BC)	; OBTEM O ENDERECO DA PROXIMA INSTRUCAO
	LD L,A		; OBTEM O ENDERECO DA PROXIMA INSTRUCAO
	INC BC
	LD A,(BC)
	LD H,A
	INC BC
NEXTOP:	LD E,(HL)	; OBTEM A PROXIMA INSTRUCAO
	INC HL   	; A PARTIR DE HL
	LD D,(HL)
	INC HL
	EX DE,HL
	JP (HL)
;
RUNFORTH:	DEC IX
	LD (IX+0),B
	DEC IX
	LD (IX+0),C
	LD C,E
	LD B,D
	JP (IY)
;
MSGFORTH1:	db 'FORTH INICIALIZADO.'
MSGFORTH2:	db 'COMPILADOR FORTH POR A COSTA'
;
; ROTINA DE IMPRESSAO DE SEQUENCIA
; DE CARACTERES
; HL = ENDERECO, E = TAMANHO
;
PUTTEXT:	DEC HL
PUTTX1:	INC HL
	LD A,(HL)
	CALL VDCHAR
	DEC E
	JR NZ,PUTTX1
	RET
;
; PONTO DE ENTRADA
;
MAIN:	CALL VDCLS
	LD A,0DH
	CALL VDCHAR
	LD E,1CH
	LD HL,MSGFORTH2
	CALL PUTTEXT
PROMPT:	LD A,0DH
	CALL VDCHAR
	LD E,13H
	LD HL,MSGFORTH1
	CALL PUTTEXT
	LD A,0DH
	CALL VDCHAR
	LD HL,VMODE
	LD (HL),00H
	LD HL,(START)
	LD SP,(PPP)
	LD IY,ENDZ80
	LD IX,(PPR)
	LD BC,SPFORTH
	JP NEXTOP
;
SPFORTH:	dw $+2
	dw $+2
	JP 4909H
;
; DICIONARIO FORTH
;
CDUP:	db 03H
	db 'DUP'
	dw 0000H	; (FIM DO DICIONARIO CORRENTE)
DUP:	dw $+2
	POP HL
	PUSH HL
	PUSH HL
	JP ENDZ80
;
CMENOR:	db 01H
	db '<'
	dw CDUP
	dw $+2
	POP DE
MENOR1:	POP HL
MENOR2:	AND A
	SBC HL,DE
	LD DE,0000H
	JP P,MENOR3
	INC E
MENOR3:	PUSH DE
	JP ENDZ80
;
CMAIOR:	db 01H
	db '>'
	dw CMENOR
	dw $+2
	POP HL
	POP DE
	JP MENOR2
;
CEMN0:	db 02H
	db '0<'
	dw CMAIOR
	dw $+2
	LD DE,0000H
	JP MENOR1
;
CROT:	db 03H
	db 'ROT'
	dw CEMN0
	dw $+2
	POP DE
	POP HL
	EX (SP),HL
	PUSH DE
	PUSH HL
	JP ENDZ80
;
CEMIT:	db 04H
	db 'EMIT'
	dw CROT
	dw $+2
	POP HL
	LD A,L
	CALL VDCHAR
	JP ENDZ80
;
CKEY:	db 03H
	db 'KEY'
	dw CEMIT
	dw $+2
	CALL KEYIN
	LD L,A
	PUSH HL
	JP ENDZ80
;
CDROP:	db 04H
	db 'DROP'
	dw CKEY
DROP:	dw $+2
	POP HL
	JP ENDZ80
;
CCSAVE:	db 05H
	db 'CSAVE'
	dw CDROP
	dw $+2
	PUSH IY
	LD IY,FORTH
	EXX
	LD HL,(PPD)
	LD DE,PPP
	XOR A
	SBC HL,DE
	INC HL
	CALL WLEADER
	LD A,55H
	CALL CASOUT
	LD B,06H
CSAVE1:	LD A,(IY+0)
	CALL CASOUT
	INC IY
	DJNZ CSAVE1
CSAVE2:	DEC H
	JP M,CSAVE3
	LD A,3CH
	CALL CASOUT
	XOR A
	CALL CASOUT
	CALL CSAVE5
	JR CSAVE2
;
CSAVE3:	XOR A
	CP L
	JR Z,CSAVE4
	LD A,3CH
	CALL CASOUT
	LD A,L
	CALL CASOUT
	CALL CSAVE5
CSAVE4:	LD A,78H
	CALL CASOUT
	LD A,(L5DDF)
	CALL CASOUT
	LD A,(L5DE0)
	CALL CASOUT
	CALL CASSTOP
	POP IY
	EXX
	JP ENDZ80
;
CSAVE5:	LD B,A
	LD A,E
	CALL CASOUT
	LD A,D
	CALL CASOUT
	ADD A,E
	LD C,A
CSAVE6:	LD A,(DE)
	CALL CASOUT
	ADD A,C
	LD C,A
	INC DE
	DJNZ CSAVE6
	LD A,C
	CALL CASOUT
	RET
;
FORTH:	db 'FORTH '
;
CLBP:	db 03H
	db 'LBP'
	dw CCSAVE
	dw $+2
	LD HL,PLBP
	PUSH HL
	JP ENDZ80
;
INPUT:	dw $+2
	LD HL,0001H
	LD (PBUF),HL
	LD HL,(BFTC)
	LD (PLBP),HL
	PUSH HL
	JP INPUT1
;
CINPUT:	db 05H
	db 'INPUT'
	dw CLBP
	dw $+2
INPUT1:	LD A,0DH
	CALL INPUT9
	POP HL
	PUSH BC
	PUSH HL
	POP BC
INPUT2:	CALL KEYIN
	CP 08H
	JR NZ,INPUT3
	DEC HL
	LD (HL),20H
	JP INPUT5
;
INPUT3:	CP 0AH
	JP NZ,INPUT4
	DEC HL
	LD A,08H
	CALL VDCHAR
	LD A,08H
	CALL INPUT9
	JP INPUT2
;
INPUT4:	CP 5BH
	JR NZ,INPUT6
	LD A,(HL)
	INC HL
INPUT5:	CALL INPUT8
	JP INPUT2
;
INPUT6:	CP 0DH
	JR Z,INPUT7
	LD (HL),A
	INC HL
	JR INPUT5
;
INPUT7:	LD (HL),00H
	AND A
	SBC HL,BC
	DEC BC
	LD A,H
	LD (BC),A
	DEC BC
	LD A,L
	LD (BC),A
	LD A,08H
	CALL VDCHAR
	LD A,20H
	CALL VDCHAR
	POP BC
	JP ENDZ80
;
INPUT8:	PUSH HL
	LD L,A
	LD A,08H
	CALL VDCHAR
	LD A,L
	CALL VDCHAR
	LD A,(CCRS)
	CALL VDCHAR
	LD A,L
	POP HL
	RET

INPUT9:	CALL VDCHAR
	LD A,(CCRS)
	CALL VDCHAR
	RET
;
CCRS:	dw 00B0H	; CARACTER UTILIZADO COMO CURSOR
;
CCURSOR:	db 06H
	db 'CURSOR'
	dw CINPUT
	dw $+2
	LD HL,CCRS
	PUSH HL
	JP ENDZ80
;
CTOKEN:	db 05H
	db 'TOKEN'
	dw CCURSOR
TOKEN:	dw $+2
	EXX
	LD HL,(PLBP)
	LD DE,(PPD)
	POP BC
	LD A,20H
	CP C
	JR NZ,TOKEN2
TOKEN1:	CP (HL)
	JR NZ,TOKEN2
	INC HL
	JR TOKEN1
TOKEN2:	PUSH HL
TOKEN3:	INC B
	INC HL
	LD A,(HL)
	CP C
	JR Z,TOKEN5
	PUSH BC
	LD C,00H
	CP C
	JR Z,TOKEN4
	POP BC
	JR TOKEN3
TOKEN4:	POP BC
	JR TOKEN8
TOKEN5:	LD A,20H
	INC HL
TOKEN6:	CP (HL)
	JR NZ,TOKEN7
	INC HL
	JR TOKEN6
TOKEN7:	LD A,(HL)
	LD C,00H
	CP C
	JR NZ,TOKEN9
TOKEN8:	PUSH HL
	LD HL,0000H
	LD (PBUF),HL
	POP HL
TOKEN9:	LD (PLBP),HL
	LD A,B
	LD (DE),A
	INC DE
	POP HL
	LD C,B
	LD B,00H
	LDIR
	EXX
	JP ENDZ80
;
CSEARCH:	db 06H
	db 'SEARCH'
	dw CTOKEN
SEARCH:	dw $+2
	EXX
	POP HL
SEARC1:	PUSH HL
	LD DE,(PPD)
	LD C,00H
	LD A,(DE)
	CP (HL)
	JR NZ,SEARC3
	LD B,A
SEARC2:	INC HL
	INC DE
	LD A,(DE)
	CP (HL)
	JR NZ,SEARC3
	DJNZ SEARC2
	LD DE,0003H
	ADD HL,DE
	POP DE
	PUSH HL
	JR SEARC4
SEARC3:	POP HL
	LD D,00H
	LD E,(HL)
	INC DE
	ADD HL,DE
	LD E,(HL)
	INC HL
	LD D,(HL)
	EX DE,HL
	LD A,H
	OR L
	JR NZ,SEARC1
	LD C,01H
SEARC4:	LD B,00H
	PUSH BC
	EXX
	JP ENDZ80
;
CEXECUT:	db 06H
	db 'EXECUT'
	dw CSEARCH
EXECUT:	dw $+2
	POP HL
	JP NEXTOP
;
CMODE:	db 04H
	db 'MODE'
	dw CEXECUT
MODE:	dw $+2
	LD HL,VMODE
	PUSH HL
	JP ENDZ80
;
INILOOP:	dw $+2
	POP HL
	LD (IX-4),L
	LD (IX-3),H
	POP HL
	LD (IX-2),L
	LD (IX-1),H
	LD DE,0FFFCH
	ADD IX,DE
	JP ENDZ80
;
STEPLOOP:	dw $+2
	PUSH IX
	POP HL
	POP DE
	LD A,E
	JP L612B
;
ENDLOOP:	dw $+2
	PUSH IX
	POP HL
	LD A,01H
L612B:	ADD A,(HL)
	LD (HL),A
	INC HL
	JR NC,L6131
	INC (HL)
L6131:	LD D,(HL)
	INC HL
	SUB (HL)
	LD A,D
	INC HL
	SBC A,(HL)
	JP C,GWHIL1
	LD DE,0004H
	ADD IX,DE
	INC BC
	JP ENDZ80
;
CPEEK16:	db 01H
	db '@'
	dw CMODE
PEEK16:	dw $+2
	POP HL
	LD E,(HL)
	INC HL
	LD D,(HL)
	PUSH DE
	JP ENDZ80
;
CIGUAL0:	db 02H
	db '0='
	dw CPEEK16
IGUAL0:	dw $+2
	POP HL
	LD A,L
	OR H
	LD DE,0000H
	JR NZ,IGUL01
	INC DE
IGUL01:	PUSH DE
	JP ENDZ80
;
CFTOKEN:	db 06H
	db 'FTOKEN'
	dw CIGUAL0
FTOKEN:	dw $+2
	LD HL,PBUF
	PUSH HL
	JP ENDZ80
;
CENDFOR:	db 04H
	db 'END,'
	dw CFTOKEN
CLOSELOOP:	dw RUNFORTH
	dw INDIC16, HERE, MINUS, INDIC8, ENDFORTH
;
CI:	db 01H
	db 'I'
	dw CENDFOR
	dw $+2
	LD L,(IX+0)
	LD H,(IX+1)
	PUSH HL
	JP ENDZ80
;
C0SET:	db 04H
	db '0SET'
	dw CI
SET0:	dw $+2
	POP HL
	LD (HL),00H
	INC HL
	LD (HL),00H
	JP ENDZ80
;
C1SET:	db 04H
	db '1SET'
	dw C0SET
SET1:	dw $+2
	POP HL
	LD (HL),01H
	INC HL
	LD (HL),00H
	JP ENDZ80
;
CGIF:	db 03H
	db '*IF'
	dw C1SET
BRANCH0:	dw $+2
	POP HL
	LD A,L
	OR H
	JP Z,GELSE1
	INC BC
	JP ENDZ80
;
CGELSE:	db 05H
	db '*ELSE'
	dw CGIF
BRANCH:	dw $+2
GELSE1:	LD A,(BC)
	ADD A,C
	LD C,A
	JR NC,GELSE2
	INC B
GELSE2:	JP ENDZ80
;
CGEND:	db 04H
	db '*END'
	dw CGELSE
GEND:	dw $+2
	POP HL
	LD A,L
	OR H
	JP Z,GWHIL1
	INC BC
	JP ENDZ80
;
CGWHILE:	db 06H
	db '*WHILE'
	dw CGEND
OFFSET:	dw $+2
GWHIL1:	LD A,(BC)
	ADD A,C
	LD C,A
	JR C,GWHIL2
	DEC B
GWHIL2:	JP ENDZ80
;
CPAGE:	db 04H
	db 'PAGE'
	dw CGWHILE
	dw $+2
	CALL VDCLS
	JP ENDZ80
;
CBASE:	db 04H
	db 'BASE'
	dw CPAGE
BASE:	dw $+2
	LD HL,VBASE
	PUSH HL
	JP ENDZ80
;
CNUMBER:	db 06H
	db 'NUMBER'
	dw CBASE
NUMBER:	dw $+2
	EXX
	LD HL,(PPD)
	LD B,(HL)
	INC HL
	LD A,(HL)
	CP 2DH
	LD A,00H
	JR NZ,NUMBR1
	DEC A
	DEC B
	INC HL
NUMBR1:	EX AF,AF'
	LD DE,0000H
	PUSH DE
	PUSH DE
NUMBR2:	LD A,(HL)
	SUB 30H
	JR C,NUMBR4
	CP 0AH
	JR C,NUMBR3
	CP 11H
	JR C,NUMBR4
	SUB 07H
NUMBR3:	LD E,A
	LD A,(VBASE)
	DEC A
	CP E
	JR NC,NUMBR5
NUMBR4:	POP HL
	EXX
	JP ENDZ80
NUMBR5:	EX (SP),HL
	EX DE,HL
	PUSH BC
	PUSH HL
	LD BC,0800H
	INC A
	LD L,C
	LD H,C
NUMBR6:	ADD HL,HL
	ADC A,A
	JR NC,NUMBR7
	ADD HL,DE
NUMBR7:	DJNZ NUMBR6
	POP DE
	ADD HL,DE
	POP BC
	EX (SP),HL
	INC HL
	DJNZ NUMBR2
	POP DE
	POP HL
	EX AF,AF'
	AND A
	JR Z,NUMBR8
	SBC HL,DE
	EX DE,HL
NUMBR8:	PUSH DE
	SCF
	PUSH AF
	EXX
	JP ENDZ80
;
TIMES1:	LD A,D
	XOR B
	EX AF,AF'
	LD A,D
	AND A
	JP P,L629C
	LD HL,0000H
	SBC HL,DE
	EX DE,HL
L629C:	LD H,B
	LD L,C
	LD A,B
	AND A
	RET P
	LD HL,0000H
	SBC HL,BC
	RET
;
TIMES2:	LD A,L
	LD BC,0800H
	LD H,C
	LD L,C
L62AD:	ADD HL,HL
	ADC A,A
	JR NC,L62B3
	ADD HL,DE
	ADC A,C
L62B3:	DJNZ L62AD
	LD C,A
	RET
;
TIMES3:	EX AF,AF'
	RET P
	EX DE,HL
	LD HL,0000H
	SBC HL,DE
	RET
;
CTIMES:	db 01H
	db '*'
	dw CNUMBER
TIMES:	dw $+2
	EXX
	POP BC
	POP DE
	CALL TIMES1
	CALL TIMES2
	CALL TIMES3
	PUSH HL
	EXX
	JP ENDZ80
;
CPLUS:	db 01H
	db '+'
	dw CTIMES
PLUS:	dw $+2
	POP HL
	POP DE
	ADD HL,DE
	PUSH HL
	JP ENDZ80
;
CMINUS:	db 01H
	db '-'
	dw CPLUS
MINUS:	dw $+2
	POP DE
	POP HL
	AND A
	SBC HL,DE
	PUSH HL
	JP ENDZ80
;
CPEEK8:	db 02H
	db 'C@'
	dw CMINUS
PEEK8:	dw $+2
	POP HL
	LD E,(HL)
	LD A,E
	RLA
	SBC A,A
	LD D,A
	PUSH DE
	JP ENDZ80
;
CDMOD:	db 05H
	db 'D/MOD'
	dw CPEEK8
DMOD:	dw $+2
	EXX
	POP HL
	POP DE
	POP BC
	LD A,H
	XOR D
	EX AF,AF'
	LD A,L
	AND A
	JP P,L631C
	NEG
L631C:	LD D,A
	LD H,B
	LD L,C
	LD A,E
	LD E,D
	AND A
	JP P,L632F
	CPL
	LD HL,0000H
	SBC HL,BC
	JP NZ,L632F
	INC A
L632F:	LD D,A
	CALL L633C
	CALL TIMES3
	PUSH HL
	PUSH BC
	EXX
	JP ENDZ80
L633C:	LD B,10H
L633E:	ADD HL,HL
	LD A,D
	ADC A,D
	LD D,A
	SUB E
	JP M,L6348
	INC L
	LD D,A
L6348:	DJNZ L633E
	LD C,D
	RET
;
CASPACE:	db 06H
	db 'ASPACE'
	dw CDMOD
ASPACE:	dw $+2
	LD HL,0020H
	PUSH HL
	JP ENDZ80
;
CASCII:	db 05H
	db 'ASCII'
	dw CASPACE
ASCII:	dw $+2
	POP HL
	LD A,30H
	ADD A,L
	CP 3AH
	JR C,ASCI2
	ADD A,07H
ASCI2:	LD L,A
	PUSH HL
	JP ENDZ80
;
CNEXT:	db 04H
	db 'NEXT'
	dw CASCII
	dw RUNFORTH
	dw PUSHNR, 00C3H, INDIC8, PUSHNR, ENDZ80
	dw INDIC16, ENDFORTH
;
CJ:	db 01H
	db 'J'
	dw CNEXT
	dw $+2
	LD L,(IX+4)
	LD H,(IX+5)
	PUSH HL
	JP ENDZ80
;
CPESQ:	db 01H
	db 27H
	dw CJ
	dw RUNFORTH
	dw ASPACE, TOKEN, CONTEXT, PEEK16, PEEK16
	dw SEARCH, BRANCH0
	db 0AH
	dw ENTRY, SEARCH, BRANCH0
	db 03H
	dw QUESTION, ENDFORTH
;
L63BE:	db 05H
	db 'DOES>'
	dw CPESQ
	dw RUNFORTH
	dw OUTRP, ENTRY, DUP, PEEK8, PUSHNR, 0005H
	dw PLUS, PLUS, POKE16, SCODE
	DEC IX
	LD (IX+0),B
	DEC IX
	LD (IX+0),C
	EX DE,HL
	LD C,(HL)
	INC HL
	LD B,(HL)
	INC HL
	PUSH HL
	JP ENDZ80
	;
;
L63EF:	db 07H
	db '<BUILDS'
	dw L63BE
	dw RUNFORTH
	dw PUSHNR, 0000H, CONSTANT, ENDFORTH
;
CPTC:	db 03H
	db 'PTC'
	dw L63EF
	dw RUNFORTH
	dw SWAP, PUSHNR, 0040H, TIMES, PLUS
	dw PUSHNR, 3C00H, PLUS, PUSHNR, 4020H
	dw POKE16, ENDFORTH
;
CADDSP:	db 03H
	db '+SP'
	dw CPTC
ADDSP:	dw $+2
	POP HL
	ADD HL,SP
	PUSH HL
	JP ENDZ80
;
CPICK:	db 04H
	db 'PICK'
	dw CADDSP
	dw RUNFORTH
	dw TRUE, MINUS, PUSHNR, 0002H, TIMES
	dw ADDSP, PEEK16, ENDFORTH
;
CSWAP:	db 04H
	db 'SWAP'
	dw CPICK
SWAP:	dw $+2
	POP HL
	EX (SP),HL
	PUSH HL
	JP ENDZ80
;
CSTRNUM:	db 01H
	db '#'
	dw CSWAP
STRNUM:	dw RUNFORTH
	dw FALSE, BASE, PEEK8, DMOD, ASCII
	dw SWAP, ENDFORTH
;
CININUM:	db 02H
	db '<#'
	dw CSTRNUM
ININUM:	dw $+2
	POP HL
	LD E,0A0H
	PUSH DE
	PUSH HL
	DEC IX
	LD (IX+0),H
	JP ENDZ80
;
CABS:	db 03H
	db 'ABS'
	dw CININUM
ABS:	dw $+2
	POP DE
	BIT 7,D
	JR Z,ABS1
	LD HL,0000H
	AND A
	SBC HL,DE
	EX DE,HL
ABS1:	PUSH DE
	JP ENDZ80
;
CNUMFMT:	db 02H
	db '#S'
	dw CABS
NUMFMT:	dw RUNFORTH
	dw STRNUM, DUP, IGUAL0, GEND
	db 0F8H
	dw DROP, ENDFORTH
;
CSIGN:	db 04H
	db 'SIGN'
	dw CNUMFMT
SIGN:	dw $+2
	BIT 7,(IX+0)
	JR Z,SIGN1
	LD L,2DH
	PUSH HL
SIGN1:	JP ENDZ80
;
CTYPE:	db 04H
	db 'TYPE'
	dw CSIGN
	dw $+2
TYPE:	EXX
TYPE1:	POP HL
	LD A,L
	CALL VDCHAR
	AND A
	JP P,TYPE1
	LD A,08H
	CALL VDCHAR
	LD A,20H
	CALL VDCHAR
	EXX
	JP ENDZ80
;
CENDNUM:	db 02H
	db '#>'
	dw CTYPE
	dw $+2
	INC IX
	JP ENDZ80
;
ENDFMT:	dw $+2
	INC IX
	JP TYPE
;
CDISPNUM:	db 01H
	db '.'
	dw CENDNUM
	dw RUNFORTH
	dw ININUM, ABS, NUMFMT, SIGN, ENDFMT
	dw ENDFORTH
;
FALSE:	dw $+2
	LD HL,0000H
	PUSH HL
	JP ENDZ80
;
CCONTEXT:	db 07H
	db 'CONTEXT'
	dw CDISPNUM
CONTEXT:	dw $+2
	LD HL,PUPDP
	PUSH HL
	JP ENDZ80
;
CCURRENT:	db 07H
	db 'CURRENT'
	dw CCONTEXT
CURRENT:	dw $+2
	LD HL,PUPDC
	PUSH HL
	JP ENDZ80
;
CCOMPILER:	db 08H
	db 'COMPILER'
	dw CCURRENT
COMPILER:	dw $+2
	LD HL,UPCC
	PUSH HL
	JP ENDZ80
;
CSTATE:	db 05H
	db 'STATE'
	dw CCOMPILER
STATE:	dw $+2
	LD HL,VSTATE
	PUSH HL
	JP ENDZ80
;
CEXISTS:	db 07H
	db '?SEARCH'
	dw CSTATE
EXISTS:	dw RUNFORTH
	dw CONTEXT, PEEK16, PEEK16, SEARCH, DUP
	dw BRANCH0
	db 20H
	dw MODE, PEEK16, BRANCH0
	db 19H
	dw DROP, COMPILER, PEEK16, SEARCH, DUP
	dw BRANCH0
	db 06H
	dw FALSE, BRANCH
	db 03H
	dw TRUE, STATE, POKE16, ENDFORTH
;
TRUE:	dw $+2
	LD HL,0001H
	PUSH HL
	JP ENDZ80
;
CPOKE16:	db 01H
	db '!'
	dw CEXISTS
POKE16:	dw $+2
	POP HL
	POP DE
	LD (HL),E
	INC HL
	LD (HL),D
	JP ENDZ80
;
CISNUMBER:	db 07H
	db '?NUMBER'
	dw CPOKE16
ISNUMBER:	dw RUNFORTH
	dw NUMBER, BRANCH0
	db 15H
	dw MODE, PEEK16, BRANCH0
	db 09H
	dw PUSHNR, PUSHNR, INDIC16, INDIC16, FALSE
	dw BRANCH
	db 03H
	dw TRUE, ENDFORTH
;
CPUSHN:	db 02H
	db '*#'
	dw CISNUMBER
PUSHNR:	dw $+2
	LD A,(BC)
	LD E,A
	INC BC
	LD A,(BC)
	LD D,A
	INC BC
	PUSH DE
	JP ENDZ80
;
; INCLUI UM VALOR 16 BITS NO DICIONARIO
CINDIC16:	db 01H
	db ','
	dw CPUSHN
INDIC16:	dw $+2
	POP DE
	LD HL,(PPD)
	LD (HL),E
	INC HL
	LD (HL),D
	INC HL
	LD (PPD),HL
	JP ENDZ80
;
CENTRY:	db 05H
	db 'ENTRY'
	dw CINDIC16
ENTRY:	dw RUNFORTH
	dw CURRENT, PEEK16, PEEK16, ENDFORTH
;
; OBTEM A PROXIMA POSICAO DE MEMORIA APONTADA POR "PPD"
NEXTPPD:	dw $+2
	LD HL,(PPD)
	LD D,00H
	LD E,(HL)
	INC DE
	PUSH DE
	JP ENDZ80
;
; OBTEM O ENDERECO DE "PPD"
CDP:	db 02H
	db 'DP'
	dw CENTRY
DP:	dw $+2
	LD HL,PPD
	PUSH HL
	JP ENDZ80
;
CHERE:	db 04H
	db 'HERE'
	dw CDP
HERE:	dw $+2
	LD HL,(PPD)
	PUSH HL
	JP ENDZ80
;
CSUMMEM:	db 02H
	db '+!'
	dw CHERE
SUMMEM:	dw $+2
	POP HL
	POP DE
	LD A,(HL)
	ADD A,E
	LD (HL),A
	INC HL
	LD A,(HL)
	ADC A,D
	LD (HL),A
	JP ENDZ80
;
CPLUS2:	db 02H
	db '2+'
	dw CSUMMEM
PLUS2:	dw $+2
	POP HL
	INC HL
	INC HL
	PUSH HL
	JP ENDZ80
;
CCREATE:	db 06H
	db 'CREATE'
	dw CPLUS2
CREATE:	dw RUNFORTH
	dw ENTRY, ASPACE, TOKEN, HERE, CURRENT
	dw PEEK16, POKE16, NEXTPPD, DP, SUMMEM
	dw INDIC16, HERE, PLUS2, INDIC16, ENDFORTH
;
RESERVE:	dw $+2
	LD DE,(UPDC)
	LD H,00H
	LD A,(DE)
	LD L,A
	ADD HL,DE
	LD DE,0003H
	ADD HL,DE
	PUSH HL
	JP ENDZ80
;
CINICMD:	db 01H
	db ':'
	dw CCREATE
	dw RUNFORTH
	dw CURRENT, PEEK16, CONTEXT, POKE16, CREATE
	dw PUSHNR, RUNFORTH, RESERVE, POKE16, MODE
	dw SET1, ENDFORTH
;
CENDCMD:	db 01H
	db ';'	; (IMMEDIATE)
	dw 0000H	; (FIM DO DICIONARIO CORRENTE)
	dw RUNFORTH
	dw PUSHNR, ENDFORTH, INDIC16, MODE, SET0
	dw ENDFORTH
;
; : ?EXECUTE STATE @ STATE 0SET MODE @ = IF EXECUTE ZERO {VZ} ELSE , THEN ;
CINEXECUTE:	db 08H
	db '?EXECUTE'
	dw CINICMD
INEXECUTE:	dw RUNFORTH
	dw STATE, PEEK16, STATE, SET0, MODE
	dw PEEK16, IGUAL, BRANCH0
	db 08H
	dw EXECUT, PVAZIA, BRANCH
	db 03H
	dw INDIC16, ENDFORTH
;
CIGUAL:	db 01H
	db '='
	dw CINEXECUTE
IGUAL:	dw $+2
	POP HL
	POP DE
	AND A
	SBC HL,DE
	LD DE,0000H
	JR NZ,IGUAL1
	INC E
IGUAL1:	PUSH DE
	JP ENDZ80
;
CPRINT:	db 02H
	db '*('
	dw CIGUAL
PRINT:	dw $+2
	LD A,(BC)
	LD D,A
PRINT1:	INC BC
	LD A,(BC)
	CALL VDCHAR
	DEC D
	JR NZ,PRINT1
	INC BC
	JP ENDZ80
;
CSTEPLOOP:	db 05H
	db '+LOOP'	; (IMMEDIATE)
	dw CENDCMD
	dw RUNFORTH
	dw PUSHNR, STEPLOOP, CLOSELOOP, ENDFORTH
;
LEAVELOOP:	dw $+2
	LD A,(IX+3)
	LD (IX+1),A
	LD A,(IX+2)
	LD (IX+0),A
	JP ENDZ80
;
CLEAVE:	db 05H
	db 'LEAVE'	; (IMMEDIATE)
	dw CSTEPLOOP
	dw RUNFORTH
	dw PUSHNR, LEAVELOOP, INDIC16, ENDFORTH
;
CDO:	db 02H
	db 'DO'	; (IMMEDIATE)
	dw CLEAVE
	dw RUNFORTH
	dw PUSHNR, INILOOP, INDIC, ENDFORTH
;
CLOOP:	db 04H
	db 'LOOP'	; (IMMEDIATE)
	dw CDO
	dw RUNFORTH
	dw PUSHNR, ENDLOOP, CLOSELOOP, ENDFORTH
;
CCMPRINT:	db 02H
	db '."'	; (IMMEDIATE)
	dw CLOOP
	dw RUNFORTH
	dw PUSHNR, PRINT, INDIC16, PUSHNR, 0022H
	dw TOKEN, HERE, PEEK8, PLUS1, DP
	dw SUMMEM, ENDFORTH
;
CINIZ80:	db 05H
	db ';CODE'	; (IMMEDIATE)
	dw CCMPRINT
	dw RUNFORTH
	dw PUSHNR, SCODE, INDIC16, MODE, SET0
	dw ENDFORTH
;
CIF:	db 02H
	db 'IF'	; (IMMEDIATE)
	dw CINIZ80
	dw RUNFORTH
	dw PUSHNR, BRANCH0, INDIC, FALSE, INDIC8
	dw ENDFORTH
;
CELSE:	db 04H
	db 'ELSE'	; (IMMEDIATE)
	dw CIF
	dw RUNFORTH
	dw PUSHNR, BRANCH, INDIC, FALSE, INDIC8
	dw SWAP, THEN, ENDFORTH
;
CTHEN:	db 04H
	db 'THEN'	; (IMMEDIATE)
	dw CELSE
THEN:	dw RUNFORTH
	dw HERE, OVER, MINUS, SWAP, POKE8
	dw ENDFORTH
;
CPLUS1:	db 02H
	db '1+'
	dw CPRINT
PLUS1:	dw $+2
	POP HL
	INC HL
	PUSH HL
	JP ENDZ80
;
CINDIC:	db 03H
	db 'DO,'
	dw CPLUS1
INDIC:	dw RUNFORTH
	dw INDIC16, HERE, ENDFORTH
;
CINDIC8:	db 02H
	db 'C,'
	dw CINDIC
INDIC8:	dw $+2
	POP DE
	LD HL,(PPD)
	LD (HL),E
	INC HL
	LD (PPD),HL
	JP ENDZ80
;
COVER:	db 04H
	db 'OVER'
	dw CINDIC8
OVER:	dw $+2
	POP HL
	POP DE
	PUSH DE
	PUSH HL
	PUSH DE
	JP ENDZ80
;
CPOKE8:	db 02H
	db 'C!'
	dw COVER
POKE8:	dw $+2
	POP HL
	POP DE
	LD (HL),E
	JP ENDZ80
;
CCR:	db 02H
	db 'CR'
	dw CPOKE8
	dw $+2
	LD A,0DH
	CALL VDCHAR
	JP ENDZ80
;
COUTRP:	db 02H
	db 'R>'
	dw CCR
OUTRP:	dw $+2
	LD L,(IX+0)
	INC IX
	LD H,(IX+0)
	INC IX
	PUSH HL
	JP ENDZ80
;
CSCODE:	db 05H
	db 'SCODE'
	dw COUTRP
SCODE:	dw RUNFORTH
	dw OUTRP, RESERVE, POKE16, ENDFORTH
;
CCONSTANT:	db 08H
	db 'CONSTANT'
	dw CSCODE
CONSTANT:	dw RUNFORTH
	dw CREATE, INDIC16, SCODE
	EX DE,HL
	LD E,(HL)
	INC HL
	LD D,(HL)
	PUSH DE
	JP ENDZ80
	;
;
CVARIABLE:	db 08H
	db 'VARIABLE'
	dw CCONSTANT
	dw RUNFORTH
	dw CONSTANT, SCODE
	PUSH DE
	JP ENDZ80
	;
;
CQUESTION:	db 08H
	db 'QUESTION'
	dw CVARIABLE
QUESTION:	dw $+2
	LD HL,(PPD)
	LD A,0DH
	CALL VDCHAR
	LD E,(HL)
	INC HL
	CALL PUTTEXT
	LD A,3FH
	CALL VDCHAR
	LD A,0DH
	CALL VDCHAR
QUEST1:	LD A,(VMODE)
	AND A
	JP Z,PROMPT
	LD HL,(PUPDC)
	LD E,(HL)
	INC HL
	LD D,(HL)
	EX DE,HL
	LD (PPD),HL
	LD A,(HL)
	ADD A,L
	LD L,A
	JR NC,QUEST2
	INC H
QUEST2:	INC HL
	INC HL
	LD A,(HL)
	LD (DE),A
	DEC HL
	DEC DE
	LD A,(HL)
	LD (DE),A
	JP PROMPT
;
PILHAVAZIA:	db 'PILHA VAZIA.'
;
PVAZIA:	dw $+2
	LD HL,(PPP)
	AND A
	SBC HL,SP
	JR NC,PVAZI1
	LD E,0CH
	LD A,0DH
	CALL VDCHAR
	LD HL,PILHAVAZIA
	CALL PUTTEXT
	JP QUEST1
PVAZI1:	JP ENDZ80
;
MAINLOOP:	dw RUNFORTH, INPUT, OUTIN, PUTOK, OFFSET
	db 0F8H
PUTOK:	dw $+2
	LD A,4FH
	CALL VDCHAR
	LD A,4BH
	CALL VDCHAR
	JP ENDZ80
;
COUTIN:	db 05H
	db 'OUTIN'
	dw CQUESTION
OUTIN:	dw RUNFORTH
	dw ASPACE, TOKEN, EXISTS, BRANCH0
	db 12H
	dw ISNUMBER, IGUAL0, BRANCH0
	db 17H
	dw FTOKEN, PEEK16, BRANCH0
	db 12H
	dw OFFSET
	db 0E7H
	dw INEXECUTE, FTOKEN, PEEK16, BRANCH0
	db 06H
	dw OFFSET
	db 0DBH
	dw QUESTION, ENDFORTH
;
KBO:	dw 0000H, 0000H, 0000H, 0FFFFH, 0FBFFH
	dw 0FFFFH, 0FFFFH
;
	dephase
;
